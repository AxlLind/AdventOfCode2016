let input = "jtfxgqec\nzxoeuddn\nanlfufma\ndxuuyxkg\nttnewhlw\nsjoyeiry\nrgfwwdhw\nqymxsllk\nforftdvy\nrzmnmewh\nhogawihi\nmtsyexba\nmrjzqqfk\nypmkexpg\npjuyopgv\nrtqquvaj\nevubmlrq\nbqlrtuce\nndidnbps\nvqukosam\nmzdyfkcd\nrrbwdimb\nuhnvxgly\naaimxpcv\nacxvinqj\nmuaeikzy\nlhzbosjd\nfflqqiit\nunfhzfrs\ngmwoyvob\ncculubmy\nzqbugcwa\nijouicwt\nbildjjww\nugksmnps\nivawibvu\nigzteede\nfoehssxo\npkeevvlt\nxumuixyw\nokhhtycj\nxhblffye\niqapgjqe\nlkhpntum\nwuzxgwow\nbkkpfguu\nbnqctsdi\ncwncjrwn\neivhabsi\nbwdicgfm\nkowiourk\ndhbzuztx\ngibitfxo\nwmrlhenb\nwfzmjvwh\nzddjirfg\nfafhmiwf\nddhvufhg\nqdwnlzqp\nnhsnngut\nuacmfgop\nmorcixux\nsfdxrgqy\ntezzvctv\ndnnmtkfp\ndygdzcib\nefurreri\nnpvpklix\nsvpbdgyw\nmcntltzd\ninwkhxlx\nsajfgeoi\nnwkqrspt\nqtzqsksv\nmtncajjk\netarsvxr\neyaeeauy\ngqnctylg\nuerywmma\nhjrxhtjb\nzdsdyfzp\nzhgrrhvd\nyvxqyalf\nrlgwftff\nxczvgpzq\nyydydclu\nrzltbrro\njforpzau\nzskadlfz\ndqbqdsgv\nbcwjltvc\nbyfoamgd\ncpefdmso\nocuetyke\nvlqrfnpp\nggikwydh\neakpyuov\nosaguhlz\nylmrfvee\nnvdvqpzm\npudbbuhh\nbwmqdpyv\nproscvgy\ncetkcpjw\nsbhcqeya\nfgnyltmf\nqcspgopp\nbdhnemmy\ntczkhihl\nyduxunvr\ndtxerncl\nxnxeaayt\nrvlcbgts\nvpavzjqs\noueloufw\nmubbhyna\nnptmeppg\nojjfbuzz\nlusboycs\ngurmmorr\nkefddaka\ncpvpszit\nbfvthzpm\nowgcvdjo\nsimxphmv\nrxedvjyw\nhmeieuxr\nvgqhcapz\nvwtvbain\naobnhdsx\nhkpshsjs\njxgegczu\nxbsfxesk\npqhifeaj\ntriurorr\nrnkufaxl\nhmrqfoaw\nveghzoxa\nzbvgbpcm\nrqrnbylj\ntxaawlta\nuuksnfel\njqvycrvw\ncdttmdpc\nwojvbrzp\nqvnuinon\ngnpguyvh\ncgbkpzbu\npdaqhlan\nmuiykslt\nprvzlunm\nwhhcrchz\ncahjhrkl\nzifdgfpq\nwanlienf\nsfrnozvi\nmwmykvyh\nfbdfzgut\nwfrviilb\nucaopfgo\nfjhuikma\nhdmizjdj\nxngpfwvn\nrueojtjg\nxvtssxtx\nvvcgzidf\nxtehcxki\nxksbfbso\nosnzpqmy\nisrnjkxh\nutleakmz\ndthmtbdt\nplregxuh\namoeprsy\ntmyhzhqd\ncsxqavbe\njmojlysw\nslebxnbl\nldzryqmj\najejyudk\nynhgnjhw\nmdibxxxw\nrvtcmesd\njmnwqddq\nhppfoplc\nnrcbjynz\nkcqnjzue\nmthvgjxm\nykztdbcv\netqqnhuz\ntezkopgq\nfwhwkqmz\nfozpkzfy\nhbbtlcog\nhdvjqwyh\nxuljsrvz\nabskreoo\naedeydgc\ndcyigvqf\nntpcvvgk\niiwgzkhl\nzofhlqlx\nveumtlae\nqibdapwq\nxpgpwirt\nwvnnautq\nwfhlgmdg\nyqcrvdgx\nsrdufrbu\nvycrvkpx\nflwxzkim\nenxayqxm\ndgpntiaj\nqedfutmp\nvfdovine\ndgrvjfjt\ndqxxjahk\nhnxpblyp\nnnadwbsc\nkrmqqgwf\nefykkzeb\nlkrmrwqw\nvfzayrwt\nchopbnyf\nvbydrtln\nazmlestl\nsqcyddvi\nzdcubjok\nafshwptc\nsjgpuoch\nbnfylydl\nrsyxsbzi\npsyuvyzx\nnpngqypd\nxejayhdk\naqfmvjfi\ntpffksph\nuekwkjnj\nljsjimwm\nhbgzjlig\nngssshxx\nicitlosb\nunxryqyt\nnzpujfti\nlupxnzhe\nkxglfnic\necewosbs\nhtlqxpiq\nclqgnyfd\nyyiozvar\nmbvjgmyc\nsrhwhlin\ncasmlryr\nebuzskkp\niewhdqtr\noyidcobe\navptvltf\nmfheqaxl\nshqnezrq\nxrpkzuvb\nsoxdjwba\naitmzlds\nrpmpozpd\nccgxauky\ngsstsjyx\nbzeolqal\nvfhddmuc\nwfbbmqfv\npumxmnhj\nqumdxkns\nxymraott\nuthlccig\nezpalags\ngiftxymr\nujjacleo\ncgwgmktp\nistetgdl\nazedmaao\nbnlfwyoq\norcwhbek\namswhkum\nyxupesxu\nmlzvqsrg\nsolkxzby\ntbaxnjdu\nxwbsiquk\nhsftntsn\najraaorz\nmwmycrff\nymnbrbpj\nuyfscatq\nkzkgmbeh\nlibgpgnr\nkxlgthxc\nvzjbobyx\nisqessab\nehursvof\nguwrjnbi\nxivkphwn\nrurrmdmi\nnqijeuzq\njambocej\nqrtidktb\nsbzvehmq\naikgzrsq\nlgydnujf\ntwafyzry\nnxhtklba\nxhyaqyqe\nxgvdfcrf\nwdieppsd\niabrfmdm\ndoijaavc\noxydttkg\nqsqiofwv\ntitrvjym\nmwojqcku\ntewiyhjx\njlqbksqd\nknycvoks\ntmcbnvhv\nekksoxmz\nmgvommal\nhrosnzeu\nfzeymbek\nevqxcukn\nilkpvdvl\nrclpjbkb\ntdpitlei\nzvvzuucc\npzdgwnfz\nmralxxlz\nwywkawzh\nhmazaakd\nllltvbex\nihsmefpz\nrzzgkjyz\nsrjqpeoq\njrczcdna\nuuyskwop\nyeuiaepa\nvzppcwnn\noqhxixdo\nxkwpfsij\ncmsoiogl\nngbmaeue\nlmqttyrj\nyhgjxfmx\nlwfgjnyp\nibbkjgra\ngaxsotzr\npaugisvs\npcqqauqi\npweuwnqs\njcbrscrj\novtsgcnh\noscsgtqn\nhkpwmhwk\npmdgwclk\nowmskdhh\nqutyussr\natdkvmzl\noqslriwe\nwafjwfxp\nipcqlsxv\nkzurbnoh\nlfhfzwqo\nucybqwrj\ntgnblzgm\nlhwlniea\ntlxymfbu\nbcyvlkvt\nglpacpjk\nrjagzpnu\nfyjpvhaq\ncjtzwtdu\ndkaqawts\npjoovtlv\nxsnwqixw\nswcftfed\ncadigksp\nfnsmxccx\ncbxmdxvb\nhpyqnpjq\njzpvphmo\nkdkpubul\nkiajwwta\nuyeuctbe\nyetyzqxw\nfgeemnbl\nbrprbvgj\nxszwwlea\nygunyguo\njwplrcbq\nfejndxnx\noxsmkcqm\nldwkbpsk\ncmzuxrst\njaoadiiu\noxcpkgbc\nnyulhuci\nbdwfqtkv\nehxvnzyd\ncizuemsb\nlbqyqduk\nkqweswcd\ntqnicuzh\nutyaiaeu\nosjdgvtj\nqmrxcaoa\nqiltxgvv\nqklfgyss\nlpjebmuo\nbvebkous\nyifrmeoa\njzgntlep\nwadcknde\nkaikclag\ntucuhehr\nbvwhuwzn\nuvlecxgy\nrzyxjhmo\ndyyfwjgv\nvocjkohi\nylyflktq\nraltxpqg\neitypruw\npfbmopgm\nqerushjt\nxykophcv\namjhrlhi\nuqkjhdhn\nkkohprfw\nhvsmtnfd\nuxgiqmqc\nnpxwplcj\nltchgces\nexiyyief\nysmvbqso\nzpyvuhqz\nlkvwronk\nvxilskkl\ncxfypwcd\njhrczkmf\nrdedtejq\ngmxcrlzi\njumwfmnn\ngkynzdtd\ndfdkxggc\nyldclxhz\nfsxvbwyj\nioiupzio\nlxyqvncv\nrsgsviny\nosgcimej\ntecqrgkq\ntozohtwt\nkmlowfrf\nhhpiukqe\nxlxlkjwf\nntvtoexx\nzzvsvdow\nyluidajg\nvumkynvp\nvaxipwwg\npqymmoif\nsgjzogut\njppwszzn\ngvvaibqu\nlwjotuil\nsrflotab\nibnblmjm\nkvcsdivb\nwqrpzmvr\ngcmqdezs\nvrizdyfo\nvtqnsjbf\njwocjmvb\nfjkiiowl\nctjhmmrq\npcckqfki\nwqolxgfg\ngbsdyrbc\ngiqmfqwb\nfodfpvyl\nnxdzwvzz\nhpnatltw\nadjjyhjd\naoguhvmv\nyyeanoir\nbaojaygs\novkebbjb\npmykvfex\nzeooykoa\nuuozuxjb\nkxxvbhbr\njxbchjlr\nqhiwdonk\ndnvfwwfh\nkjfrlslh\nwionbrdf\nqgkjarob\nkwplsxso\ntxgelygh\nvlmziqwf\nwbetqqkp\nqfkocear\nwrvonhyr\nsbiqrcri\nlnwzitce\nbctyrwph\nkallfwzc\nzfqwanet\nbevnljjr\nkwqsktan\ngjviqwlu\nzflsnpig\nwzaufqvr\nuvxhutav\ndiejbica\nojciaexn\nzyjoxrwi\ndjkodeiz\ngsinkcqk\njkonssuq\neychyabp\nfkcogwnr\nkkioyrnn\ninqxlztu\ncqnbxxks\nipwmpdmm\nmoozfajm\nirjaimrw\nojihmanb\nhzoszxzc\najjvxqqi\nohkfkijd\nnlsahrpv\nzizxtmxa\ngjtnrurd\npyqghfuj\nfltnnyfe\ngoxagvfp\nnplhpkiy\ndlwgyvby\nfzrfhcgh\nzaiuostp\njdjojfkw\nthksqbjh\nqopcwnht\newkljwho\nqguaeaac\nwxzzxgcc\nnlnuuhdu\nihtzrqay\nnmtdbkhp\nyasxhulm\ndrzjobfy\nqpgcjdxn\naegbxmjb\nbbuxsffr\nzevjcgzn\npgbqezxk\nqdlepjko\nzbtzvicm\nssjdcggg\nugrtxalo\ntsbvnppt\nrboleppu\ngywfqiwz\nskgzeqhu\nhzuggbcf\ndkegaxap\nzijcjrkm\njtfkeoog\nfyvtrvig\ngophbeoj\nieatnihe\nvlaauxgz\nmxnheqkz\nmftwybny\nebawojuj\ndyrvecbs\nlrrcwang\nqswijdeu\nwkuszdax\necaokzfc\npmbznspx\ntjqrztdv\nmwdxruge\nwhutfdqy\nzpfwqvox\nfkqapoid\nbodleqbn\nkpxiuodk\njohmsncc\nenhamlol\nyhtydoss"

let count_chars counts s =
  let add_char i =
    let c = match Hashtbl.find_opt counts.(i) s.[i] with
    | Some c -> c+1
    | None   -> 1 in
    Hashtbl.replace counts.(i) s.[i] c in
  [0;1;2;3;4;5;6;7] |> List.iter add_char;
  counts

let find_char f start count =
  let cmp a c1 (b, c2) = if f c1 c2 = c1 then (a,c1) else (b,c2) in
  Hashtbl.fold cmp count ('0', start) |> fst |> String.make 1

let find_code f start counts = counts
  |> Array.map (find_char f start)
  |> Array.to_list
  |> String.concat ""

let main () =
  let char_count = input
  |> String.split_on_char '\n'
  |> List.fold_left count_chars (Array.init 8 (fun _ -> Hashtbl.create 26)) in
  let p1 = char_count |> find_code max 0   in
  let p2 = char_count |> find_code min 100 in
  (p1, p2)

let () = Aoc.timer main
